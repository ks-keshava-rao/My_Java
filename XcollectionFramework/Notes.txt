1. Built in  data structures provided by java .
2. limitations of an array :- fixed size of an array
3. if the number of elememtns increase then it's not faesable .
4. Variable size collection - Array list and linkedlist 
5. Distinct collection - Set 
6. Sorted collected - sorted set 
7. Insert operation (like shifting the element)
8. Delete 
9. search
10. Java provides collections framework in the form of classes and interfaces.

Iterable(I) -----> Collection(I) |
                                 | --- List(Ordered & Duplicates allowed)(I)
                                           | --->  ArrayList(C)
                                           | --->  linkedlist (C)
                                           | --->  Vectors(C) ----> Stack (C)
                                 |
                                 | --- Set(Unordered & No duplicated allowed)(I)
                                           | ---> Sorted Set(I) ---> Tree set (C)
                                           | ---> HashSet(C)
                                           | ---> LinkedHashSet(C)
                                 |
                                 | --- Queue(FIFO)(I)
                                           | ---> Deque(I) ---> ArrayDeque(C)
                                           | ---> Priority Queue (C)
Map(I) |
       | ---> HashMap(C)
       | ---> LinkedHashMap(C)
       | ---> HashTable(C)
       | ---> SortedMap(I) ---> TreeMap(C)

11. Package java.util
12. Interface Collection - These collection interfaces or classes are generic 
    Ex c1 | A | B | C | D | E | F |  , c2 E | F | G | H |
    1. add(E e); // add an object in the collection add()
    2. addAll(Collection<E> c); // another collection can be passed , c is type of object c1.addAll(c2) ABCDEFGH
    3. remove(Object o) // Remove an object from collection if found delete . returns boolean . 
    4. removeAll(collection<E> c) // Removes all the elementes passed in the collection , c1.removeAll(c2) ABCD
    5. retainAll(collection<E> c) // Retains only those objects which are common c1.retainAll(c2) EF
    6. clear()  // delete all the objects 
    7. isEmpty() // returns true if isEmpty
    8. contains(Object o) // checks if the collection contains the object 
    9. containsAll(collection<E> e) // checks if all the objects are present in the given collection c1.containsAll(c2) false GH not present in c1.
    10. equals(Object c) // compares two collections by no of objects and objects 
    11. size() // size of the collection 
    12. iterator() // this interface Scans or parses through the collection, unidirectional. 
    13. toArray() // converts the collection into an array .
13. Interface List extends Collection 
    Ex c1 | A | B | C | D | E | F |
    1. add(int index,E e) // adding element at a given index by making an free space . 
    2. addAll(int index, Collection<E> e) // adding the collection element to an index and the present elements at the index will be shifted
    3. remove(int index) // remove an object from index
    4. get(int index) // get the object from the index
    5. set(int index,E e) // set the element at an index by replacing the current operation
    6. subList(int from , int to) // give the elememts from index from to to .
    7. indexOf(object o) // gives the index of the object left to right .
    8. lastIndexOf(object o) // gives the index of the object right to left .
    9. listIterator() // access the element in bidirectional way
    10.listIterator(int index) // access from particular index
14. Interface Set extends collections (Unordered and unique collection of objects)
    Same methods as collections interface 
15. Interface Queue extends collections 
    1. add(E e) // add at the end .
    2. poll() // remove the first object . if Queue is empty it will return null .
    3. remove() throws NoSuchElementException // remove the first object . if Queue is empty by throwing NoSuchElementException
    4. peek() // will give the first element of the queue if empty will return null 
    5. element() throws NoSuchElementException // will give the first element of the queue if empty will throw NoSuchElementException
