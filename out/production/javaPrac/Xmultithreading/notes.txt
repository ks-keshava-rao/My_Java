Mutliprogramming ----> Multi user 
       |-----> Multi Tasking ----> Mutltithreading
1. More than one program running simultaneously for one user is called multitasking . WINDOWS MACos
2. Mutltithreading different tasks in an single application , doesn't block the user because threads are independent .
3. threads are light weighted compared to task , they are sub process , smallest unit of processing. 
4. CPU runs , the threds alternatively but feels like they are runing together . 
5. mutliprocessing + multithreading = multitasking . 
6. Threads use shared memory they don't allocate separate memory and easy context switching . 
7. process based multitasking(mutliprocessing) :- dedicated addrress in memory , heavy weight process , expensive communication b/w .
8. Thread based multitasking(multithreading):- shared address space , lightweight , inexpensive communication , at a time one thread is executed . 
9. Two things available for achieveing multithreading 1. Thread class (provides mechanism) 2. Runnable Interface ()
10. Thread class :- multithreading for own class then extend thread into the class . 
11. Runnable interface :- if class is already extending from other class then implement runnable because java allows only one class to extend at a time . 
12. Lifecycle of a thread :- New , Active , Blocked/waiting , timed waiting , Terminated . 
13. STATES of a Thread 
https://share.anysnap.app/fpzxGUp4C1AQ
       New:- when a new thread is created and code hasn't run and executed yet . only start() method can be called in this state . 
       Active:- invoked when start() method is called , it has two states . 
              1. Runnable state :-
                     1. Ready to run , maybe running or ready to run at the given instant of time 
                     2. Duty of scheuler to allocate the time for thread to run . 
                     3. Each thread has a time slot assinged for execution and are served by CPU on first come first serve manner 
                        process of allocating time to threads is knows as time slicing , runnable state has a queue where all the threads lie waiting for their turn . 
                     4. A thread can come into runnable state from running , waiting or new states 
              2. Running state:- 
                     1. Processor has allocated time slot for the thread execution and it's run method. 
                     2. Thread can come into running state only from the runnable state . 
                     3. Running thread may giveup control when sleep() method is invoked goes out of queues , the enters runnable state when time period elaspses . 
                        when thread is suspended using suspend() for some time to satisfy conditions  . can be revived using resume() method .
                        when wait() is called on thread to wait for sometime , can be run again using notify() or notifyall() 
       Blocked or Waiting :- 
                     1. Whenever the thread is  inactive for a span of time temporarily . 
                     2. When main thread invokes join() it moves to waiting , then waits for child thread to complete tasks , once completed sends 
                        a notification to main thread to move to active thread . 
                     3. Duty of thread scheduler to prioritise which thread to run incase of more threads accumulation . 
       Timed Waiting :- 
                     1. longer waiting leads to starvation . 
                     2. if a thread is executing a critical part then another thread has to wait forever to avoid this 
                        the another thread is kept in timed waiting to avoid startvation .
                     3. using sleep() method this is achieved .
       Terminated state:- 
                     1. Terminated state is where the thread has finished it's job 
                     2. abnormal termination occurs when some unusual events like unhandled exception or segmentation fault occurs . 
                     3. when the run() method completes it's execution of statements . 
                     4. thread can also be dead by using stop() method . 
14. Thread priorities :- 
                     1. by default priority is 5 
                     2. min is 1 max is 10 . 
                     3. ex- keyboard input - T1 high priority , auto checker - low priority . 
                            , fetching data is priority , rendering is less priority . 
                     4. Java has own multithreading system , jvm has own scheduler.

 15. Thread class :- 1. Thread()
                     2. Thread(Runnable r)
                     3. Thread(Runnable r,String name)
                     4. Thread(ThreadGroup g, String name)  
                     5. Thread(String name)                 
16.getxxx()/setxxx():- 1. long getId() //JVM id for the thread 
   Enquiry methods     2. String getName()
                       3. int getPriority()
                       4. ThreadState getState()
                       5. ThreadGroup getThreadGroup()
                       6. void setName(String name)
                       7. void setPriority( int p)
                       8. void setDaemon(boolean d) // Daemon thread a thread which runs in background with least priority ex:- autosave , garbage collector .
                       9. boolean isAlive() 
                       10. boolean isDaemon()
                       11. boolean isInterrupted() // a method interrupt can interrupt a thread . 
17. Instance methods :- 1. void interrupt() // this will interrupt a thread . mostly done in case of waiting or sleeping 
                        2. void join() // when a thread is finished it's job instead of getting terminated it can wait for other threads to complete . 
                        3. void join(long millis) // join with time 
                        4. void run() // has a actual functionaliy of a thread . 
                        5. void start() // this method knows how to run a thread has a multithreading mechanism
18. Static methods :-   1. int activeCount() // tells how many threads are active in a group 
                        2. Thread currentThread() // gives a reference of a running thread.
                        3. void yield() //if higher priroty thread takes more cpu time and low priority thread waits longer leading to starvation so high priority thread can 
                                          yield() and allow complete other low prioity thread . 
                        4. void dumpsStack() //stack of an application , we can know the depth of execution stack . 
19. Synchornization :-  1. Resource sharing :- more than one thread want to access on resource .
                           Heap is common , so the data object in heap can be accessed by multiple threads this becomes resource sharing. 
                        2. Critical section :- The piece or section of a code in the thread that is accessing the shared resource is critical section . 
                        3. Mutual exclusion :- Threads must not access the resource simultaneously and instead access resource one at a time . 
                           locking/mutex , semaphore , monitor are the systems that allow to access multiple threads a resource at a time . 
                           coordination and communication b/w the threads is done by race condition and Inter-Thread commmunication.
                        4. Locking/Mutex :- Thread1 will put a lock when it's utilizing the resource and when the time slice is over for thread1 and thread2 gets to executed
                           it still can't access the resource since it's been locked by thread1 and waits for it's time slice to complete.when thread1 gets executed it again used the resource 
                           since it's the one that locked . when done thread1 can unlock the resource and allow it for the Thread2 to utilize . 
                           drawback:- when Thread1 is executing and it wants to use resource and it checks if its open for access but until then thread1 time slice get's over and it did not put lock , 
                                      when Thread2 gets executed it checks if the resource is available it puts the lock and utilize until it's slice time , the again when thread1 
                                      get's executed it doesn't check again for access since it's already checked for it and it directly locks it eventhough thread2 is using it . 
                            i.e If a thread obtains a lock and goes to sleep or is preempted, then the other thread may not move forward. This may lead to starvation.
                            It can't be locked or unlocked from a different context than the one that acquired it.
                        5. Semaphore:- When thread1 is in the ready queue and wants to utilize the resource it will call wait() method and use it , 
                            if thread2 wants to use the resource it will call the wait() but since resource is already been used and locked , the thread 2 will go to 
                            block queue and wait for the thread1 to finish once therad1 is finished it will call signal() and thread2 will be added to ready queue. 
                            -> locking and ulocking is done by operating system . 
                        6. Monitor:- Java provides the whole object for read write operations and performs Mutual exclusion . here neither thread nor operating system is involved in the 
                                          mutual exclusion . monitor provides it's own read and write operations .
20. Inter-Thread communication :- 
                        1. Producer writes a shared object . 
                        2. Consumer should consume or read the data that is written by the producer . 
                        3. When producer writes it should make a flag false and consumer can read and toggle the flag again for producer to write again .
                        4. Race condition :-  when consumer1 is done reading from the object it'll nortify and goes into blocked state , then there's a uncertainity which consumer thread will be executing next 
                           this leads to a RACE CONDITION between the threads . in this race condition producer is also involved and it may execute again . 
                        5. to overcome this  When more that one consumer are there each consumer can increment the flag by 1 till Nth consumer and it'll be zero when nth consumer is done so that producer can resume writing . 
                           procducer thread will only execute when the count is 0 . 
                        6. Inter-thread communication has to be achieved programmatically . 

                        